import TaskColumn from "src/shared/TaskColumn/TaskColumn.tsx";
import { Status } from "src/schemas/config.ts";
import { useEffect, useState } from "react";
import { TaskSchema } from "src/entities/Project/lib/schema/schema.ts";
import { useSelector } from "react-redux";
import { getCurrentProject } from "src/entities/Project";
import styles from "src/entities/Project/ui/Project.module.scss";
import { closestCorners, DndContext, DragOverlay, PointerSensor, useSensor, useSensors } from "@dnd-kit/core";
import { TaskCard } from "src/entities/Project/ui/TaskCard/TaskCard.tsx";
import { DragEndEvent, DragOverEvent, DragStartEvent } from "@dnd-kit/core";
import { useAppDispatch } from "src/hooks/storeHooks.ts";
import { swapTasks } from "src/entities/Project/lib/services/swapTasks.ts";


export interface ColumnLayoutProps {
    openModal: (id: string) => void
}

export interface tasksType {
    [key: string]: TaskSchema[];
}

export const ColumnsLayout = (props: ColumnLayoutProps) => {
    const { openModal } = props;


    const project = useSelector(getCurrentProject);

    const [tasks, setTasks] = useState<tasksType>({
        [Status.TODO]: [],
        [Status.IN_PROGRESS]: [],
        [Status.DONE]: [],
    });

    const [activeId, setActiveId] = useState<number>();


    const dispatch = useAppDispatch();

    const sensors = useSensors(
        useSensor(PointerSensor, {
            activationConstraint: {
                distance: 8,
            },
        })
    )

    const updateTasks = () => {
        const updatedTasks: tasksType = {
            [Status.TODO]: [],
            [Status.IN_PROGRESS]: [],
            [Status.DONE]: [],
        };

        // Проверка на существование project и его свойства taskList
        if (project && Array.isArray(project.taskList)) {
            // Сортировка задач в каждом статусе по renderIndex
            project.taskList.forEach((el) => {
                switch (el.status) {
                    case Status.TODO:
                        updatedTasks[Status.TODO].push(el);
                        break;
                    case Status.IN_PROGRESS:
                        updatedTasks[Status.IN_PROGRESS].push(el);
                        break;
                    case Status.DONE:
                        updatedTasks[Status.DONE].push(el);
                        break;
                }
            });
        }

        // Сортировка задач в каждом статусе по renderIndex
        Object.keys(updatedTasks).forEach(status => {
            updatedTasks[status as Status] = updatedTasks[status as Status].sort((a, b) => {
                return (a.renderIndex) - (b.renderIndex);
            });
        });
        return updatedTasks;
    };

    function findContainer(id: number | string) {
        {
            if (id in tasks) {
                console.log(id, "in tasks")
                return id
            }
            return Object.keys(tasks).find((key) => tasks[key].some((task) => task.renderIndex === id));
        }

    }

    function handleDragStart(event: DragStartEvent) {
        const { active } = event;
        const { id } = active;
        console.log(active, id)

        setActiveId(id);


    }

    function handleDragOver(event: DragOverEvent) {
        const { active, over } = event;
        const { id } = active;
        if (!over) {
            return;
        }

        const overId = over.id; // Assuming over is not null


        // Find the containers
        const activeContainer = findContainer(id);
        const overContainer = findContainer(overId);
        console.log(overId, activeContainer, overContainer)

        if (
            !activeContainer ||
            !overContainer ||
            activeContainer === overContainer
        ) {
            return;
        }

        setTasks(prevTasks => {
            const updatedTasks = { ...prevTasks };

            // Find the task to move
            const taskToMove = updatedTasks[activeContainer].find(task => task.renderIndex === id);

            if (taskToMove) {
                // Remove the task from the active container
                updatedTasks[activeContainer] = updatedTasks[activeContainer].filter(task => task.renderIndex !== id);

                // Create a new task object with the updated status
                const updatedTask = { ...taskToMove, status: overContainer as Status };

                // Add the updated task to the over container
                updatedTasks[overContainer] = [...updatedTasks[overContainer], updatedTask];
            }
            return updatedTasks;
        });
    }

    async function handleDragEnd(event: DragEndEvent) {
        const { active, over } = event;
        const { id } = active;
        if (!over) {
            return;
        }
        const { id: overId } = over;
        const activeContainer = findContainer(id);
        const overContainer = findContainer(overId);

        if (
            !activeContainer ||
            !overContainer ||
            activeContainer !== overContainer
        ) {
            return;
        }

        const activeIndex = tasks[activeContainer].findIndex(task => task.renderIndex === active.id);
        const overIndex = tasks[overContainer].findIndex(task => task.renderIndex === overId);

        // return arrayMove(tasks[overContainer], activeIndex, activeIndex)

        setTasks((prevTasks) => {
            const updatedTasks = { ...prevTasks };

            // Find the task to move
            const taskToMove = { ...updatedTasks[activeContainer][activeIndex] };
            const taskToReplace = { ...updatedTasks[overContainer][overIndex] };

            if (taskToMove && taskToReplace) {
                updatedTasks[activeContainer][activeIndex] = { ...taskToReplace, renderIndex: taskToMove.renderIndex };
                updatedTasks[overContainer][overIndex] = { ...taskToMove, renderIndex: taskToReplace.renderIndex };
            }

            return updatedTasks;
        });

        if (activeContainer === overContainer) {
            // If tasks are moved within the same column, update renderIndex for all tasks in that column
            setTasks((prevTasks) => {
                const updatedTasks = { ...prevTasks };

                // Update renderIndex for all tasks in the active container
                updatedTasks[activeContainer] = updatedTasks[activeContainer].map((task, index) => ({
                    ...task,
                    renderIndex: index
                }));
                return updatedTasks;
            });
        }

        // Обновление порядка задач в колонках
        const updatedTasksInColumns = {
            ...tasks,
            [activeContainer]: [...tasks[activeContainer]],
            [overContainer]: [...tasks[overContainer]]
        };

        // Перемещаем задачу из одной колонки в другую
        const [removedTask] = updatedTasksInColumns[activeContainer].splice(activeIndex, 1);
        updatedTasksInColumns[overContainer].splice(overIndex, 0, removedTask);

        setTasks(updatedTasksInColumns);

        const activeTask = tasks[activeContainer][activeIndex];
        const overTask = tasks[overContainer][overIndex];

        if (overTask && activeTask && project._id) {
            await dispatch(
                swapTasks({
                    activeTask: activeTask,
                    overTask: overTask
                })
            );
        }

        setActiveId(undefined);
    }

    useEffect(() => {
        if (project && project.taskList) {
            // Добавляем проверку на существование project и его свойства taskList
            setTasks(updateTasks());
        }
    }, [project]);

    return (
        <>
            <div className={styles.columns}>
                <DndContext
                    sensors={sensors}
                    collisionDetection={closestCorners}
                    onDragStart={handleDragStart}
                    onDragOver={handleDragOver}
                    onDragEnd={handleDragEnd}
                >
                    <TaskColumn
                        key={Status.TODO}
                        tasks={tasks[Status.TODO]}
                        id={Status.TODO}
                        status={Status.TODO}
                        openModal={openModal}
                    />

                    <TaskColumn
                        key={Status.IN_PROGRESS}
                        tasks={tasks[Status.IN_PROGRESS]}
                        id={Status.IN_PROGRESS}
                        status={Status.IN_PROGRESS}
                        openModal={openModal}
                    />

                    <TaskColumn
                        key={Status.DONE}
                        tasks={tasks[Status.DONE]}
                        id={Status.DONE}
                        status={Status.DONE}
                        openModal={openModal}
                    />
                    <DragOverlay>
                        {activeId ?
                            <TaskCard
                                task={Array.isArray(project.taskList) ? project.taskList.find((el) => el.renderIndex === activeId) || null : null}
                            />
                            : null}
                    </DragOverlay>
                </DndContext>
            </div>
        </>
    )
}
